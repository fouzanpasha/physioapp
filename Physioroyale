<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PhysioGamer - Physical Therapy Motivation App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Poppins', sans-serif;
            transition: background-color 0.3s ease;
        }
        
        .correct-form {
            animation: flashGreen 0.5s;
        }
        
        .partial-form {
            animation: flashYellow 0.5s;
        }
        
        .bad-form {
            animation: flashRed 0.5s;
        }
        
        @keyframes flashGreen {
            0% { background-color: rgba(74, 222, 128, 0.2); }
            50% { background-color: rgba(74, 222, 128, 0.7); }
            100% { background-color: rgba(74, 222, 128, 0.2); }
        }
        
        @keyframes flashYellow {
            0% { background-color: rgba(250, 204, 21, 0.2); }
            50% { background-color: rgba(250, 204, 21, 0.7); }
            100% { background-color: rgba(250, 204, 21, 0.2); }
        }
        
        @keyframes flashRed {
            0% { background-color: rgba(248, 113, 113, 0.2); }
            50% { background-color: rgba(248, 113, 113, 0.7); }
            100% { background-color: rgba(248, 113, 113, 0.2); }
        }
        
        .exercise-preview {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .exercise-preview:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .progress-ring__circle {
            transition: stroke-dashoffset 0.35s;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }
        
        #exerciseContainer {
            min-height: 400px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Audio elements for feedback -->
    <audio id="goodSound" src="https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3"></audio>
    <audio id="warningSound" src="https://assets.mixkit.co/sfx/preview/mixkit-warning-alarm-886.mp3"></audio>
    <audio id="badSound" src="https://assets.mixkit.co/sfx/preview/mixkit-bad-beep-incorrect-2965.mp3"></audio>

    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-8 text-center">
            <h1 class="text-4xl font-bold text-indigo-700 mb-2">PhysioGamer</h1>
            <p class="text-lg text-gray-600">Turn your physical therapy into a game with real-time feedback!</p>
        </header>

        <!-- Main Content -->
        <div class="grid md:grid-cols-12 gap-8">
            <!-- Exercise Selection -->
            <div class="md:col-span-4">
                <div class="bg-white rounded-xl p-6 shadow-md">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Your Exercises</h2>
                    
                    <div class="space-y-4">
                        <div class="exercise-preview bg-indigo-50 rounded-lg p-4 cursor-pointer" onclick="startExercise('squats')">
                            <h3 class="font-medium text-indigo-700">Basic Squats</h3>
                            <p class="text-sm text-gray-600">Focus: Leg strength and mobility</p>
                            <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/60452d1c-e3dc-4c0a-a53d-fb2cf06498c2.png" alt="Animation showing proper squat form with knees aligned over toes and back straight" class="mt-2 rounded" />
                        </div>
                        
                        <div class="exercise-preview bg-blue-50 rounded-lg p-4 cursor-pointer" onclick="startExercise('shoulder_press')">
                            <h3 class="font-medium text-blue-700">Shoulder Press</h3>
                            <p class="text-sm text-gray-600">Focus: Shoulder strength</p>
                            <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/d60833e5-0e3b-4075-8350-595ea01ac9ba.png" alt="Illustration of shoulder press exercise with arms extended upward, elbows aligned" class="mt-2 rounded" />
                        </div>
                        
                        <div class="exercise-preview bg-green-50 rounded-lg p-4 cursor-pointer" onclick="startExercise('bridge')">
                            <h3 class="font-medium text-green-700">Bridge Exercise</h3>
                            <p class="text-sm text-gray-600">Focus: Core and back strength</p>
                            <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/c920c39d-f378-4f2f-ba14-795a2c278c72.png" alt="Demonstration of bridge position with hips lifted and knees bent" class="mt-2 rounded" />
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Exercise Display and Feedback -->
            <div class="md:col-span-8">
                <div class="bg-white rounded-xl p-6 shadow-md h-full">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-semibold text-gray-800">Exercise Feedback</h2>
                        <div class="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm font-medium" id="statusDisplay">Select an exercise to begin</div>
                    </div>
                    
                    <div id="exerciseContainer" class="flex flex-col items-center justify-center bg-gray-100 rounded-lg mb-6">
                        <div class="text-center py-16">
                            <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/e974bfc2-a7eb-46d0-b8db-d0168b6dfcd4.png" alt="Placeholder showing selection prompt with illustration of different physical therapy exercises" class="rounded-lg mx-auto" />
                            <p class="mt-4 text-gray-500">Pick an exercise from the left to start your session</p>
                        </div>
                    </div>
                    
                    <!-- Feedback Console -->
                    <div class="bg-gray-800 rounded-lg p-4 text-white">
                        <div class="flex justify-between items-center mb-2">
                            <h3 class="font-medium">Form Feedback</h3>
                            <div class="text-xs opacity-70" id="feedbackTimer">00:00</div>
                        </div>
                        <div id="feedbackConsole" class="h-32 overflow-y-auto text-sm font-mono bg-gray-900 rounded p-2 mb-2 space-y-1">
                            <div class="text-gray-400">System ready. Waiting for exercise selection...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Stats Section -->
        <div class="bg-white rounded-xl p-6 shadow-md mt-8">
            <div class="flex flex-wrap items-center justify-between mb-4">
                <h2 class="text-2xl font-semibold text-gray-800">Your Progress</h2>
                <div class="flex items-center">
                    <span class="text-sm text-gray-500 mr-2">Session Score:</span>
                    <span class="text-2xl font-bold text-indigo-600" id="sessionScore">0</span>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Score Progress -->
                <div class="bg-blue-50 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="font-medium text-blue-700">Today's Score</h3>
                        <span class="text-xl font-bold" id="todayScore">0</span>
                    </div>
                    <svg width="100%" height="16" class="rounded">
                        <rect width="100%" height="16" fill="#e5e7eb" rx="8" ry="8" />
                        <rect id="todayScoreBar" width="0%" height="16" fill="#3b82f6" rx="8" ry="8" />
                    </svg>
                </div>
                
                <!-- Streak Counter -->
                <div class="bg-green-50 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="font-medium text-green-700">Current Streak</h3>
                        <span class="text-xl font-bold" id="streakCount">0</span>
                    </div>
                    <svg width="100%" height="16" class="rounded">
                        <rect width="100%" height="16" fill="#e5e7eb" rx="8" ry="8" />
                        <rect id="streakBar" width="0%" height="16" fill="#10b981" rx="8" ry="8" />
                    </svg>
                </div>
                
                <!-- Goal Progress -->
                <div class="bg-indigo-50 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="font-medium text-indigo-700">Weekly Goal</h3>
                        <span class="text-xl font-bold"><span id="weeklyProgress">0</span>/1000</span>
                    </div>
                    <svg width="100%" height="16" class="rounded">
                        <rect width="100%" height="16" fill="#e5e7eb" rx="8" ry="8" />
                        <rect id="weeklyProgressBar" width="0%" height="16" fill="#6366f1" rx="8" ry="8" />
                    </svg>
                </div>
            </div>
            
            <!-- Circular Progress -->
            <div class="mt-8 flex justify-center">
                <div class="relative">
                    <svg class="w-32 h-32">
                        <circle
                            class="text-gray-200"
                            stroke-width="8"
                            stroke="currentColor"
                            fill="transparent"
                            r="56"
                            cx="64"
                            cy="64"
                        />
                        <circle
                            id="progressCircle"
                            class="text-indigo-600"
                            stroke-width="8"
                            stroke-linecap="round"
                            stroke="currentColor"
                            fill="transparent"
                            r="56"
                            cx="64"
                            cy="64"
                            stroke-dasharray="352"
                            stroke-dashoffset="352"
                        />
                    </svg>
                    <div class="absolute inset-0 flex items-center justify-center flex-col">
                        <span class="text-2xl font-bold text-indigo-600" id="completionPercent">0%</span>
                        <span class="text-xs text-gray-500">Complete</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // State variables
        let currentExercise = null;
        let sessionScore = 0;
        let exerciseStartTime = null;
        let feedbackInterval = null;
        let formEvaluationInterval = null;
        let todayScore = 0;
        let streakCount = 0;
        let weeklyProgress = 0;
        
        // DOM elements
        const statusDisplay = document.getElementById('statusDisplay');
        const exerciseContainer = document.getElementById('exerciseContainer');
        const feedbackConsole = document.getElementById('feedbackConsole');
        const feedbackTimer = document.getElementById('feedbackTimer');
        const sessionScoreDisplay = document.getElementById('sessionScore');
        const todayScoreDisplay = document.getElementById('todayScore');
        const streakCountDisplay = document.getElementById('streakCount');
        const weeklyProgressDisplay = document.getElementById('weeklyProgress');
        const progressCircle = document.getElementById('progressCircle');
        const completionPercent = document.getElementById('completionPercent');
        
        // Audio elements
        const goodSound = document.getElementById('goodSound');
        const warningSound = document.getElementById('warningSound');
        const badSound = document.getElementById('badSound');
        
        // Exercise data
        const exercises = {
            squats: {
                name: "Basic Squats",
                description: "Stand with feet shoulder-width apart. Lower your body as if sitting back into a chair, keeping knees behind toes. Return to standing position.",
                image: "https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/a48fe2bf-1f38-4b64-9d3e-31700d5505b5.png",
                alt: "Detailed illustration of squat form showing proper alignment of knees over toes and straight back posture"
            },
            shoulder_press: {
                name: "Shoulder Press",
                description: "Stand with feet shoulder-width apart, holding weights at shoulder height. Press weights upward until arms are fully extended, then lower back down slowly.",
                image: "https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/af9368b9-dab4-4392-a2e8-8343675419d2.png",
                alt: "Step-by-step demonstration of shoulder press with weights showing full range of motion"
            },
            bridge: {
                name: "Bridge Exercise",
                description: "Lie on your back with knees bent and feet flat on the floor. Lift your hips to create a straight line from knees to shoulders. Lower back down with control.",
                image: "https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/a84b016d-24b5-400d-9b5b-b866a2cc0a3b.png",
                alt: "Bridge position illustration showing proper hip alignment and core engagement"
            }
        };
        
        // Initialize the app
        function initApp() {
            // Load saved data from localStorage
            const savedData = localStorage.getItem('physioGamerData');
            if (savedData) {
                const data = JSON.parse(savedData);
                todayScore = data.todayScore || 0;
                streakCount = data.streakCount || 0;
                weeklyProgress = data.weeklyProgress || 0;
                updateProgressBars();
            }
        }
        
        // Start an exercise session
        function startExercise(exerciseId) {
            if (currentExercise === exerciseId) return;
            
            // Reset any existing exercise
            if (currentExercise) {
                resetExercise();
            }
            
            currentExercise = exerciseId;
            const exercise = exercises[exerciseId];
            
            // Update UI for new exercise
            statusDisplay.textContent = exercise.name;
            statusDisplay.className = "bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium";
            
            exerciseContainer.innerHTML = `
                <div class="text-center p-4">
                    <h3 class="text-xl font-semibold mb-2">${exercise.name}</h3>
                    <img src="${exercise.image}" alt="${exercise.alt}" class="rounded-lg mx-auto mb-4" />
                    <p class="text-gray-700 mb-6">${exercise.description}</p>
                    <button onclick="simulateFormAnalysis()" class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-6 rounded-full transition">
                        Start Form Analysis
                    </button>
                </div>
            `;
            
            addToFeedbackConsole(`Starting ${exercise.name} session`, 'system');
        }
        
        // Simulate form analysis with random results (in a real app, this would use computer vision)
        function simulateFormAnalysis() {
            exerciseStartTime = new Date();
            addToFeedbackConsole("Form analysis started. Begin your exercise.", 'system');
            
            // Start timer
            updateTimer();
            feedbackInterval = setInterval(updateTimer, 1000);
            
            // Simulate form evaluation at random intervals
            formEvaluationInterval = setInterval(() => {
                const random = Math.random();
                
                if (random < 0.7) { // 70% chance of good form
                    evaluateForm('good');
                } else if (random < 0.9) { // 20% chance of partial form
                    evaluateForm('partial');
                } else { // 10% chance of bad form
                    evaluateForm('bad');
                }
            }, 2000); // Evaluate every 2 seconds
        }
        
        // Evaluate the user's form
        function evaluateForm(result) {
            let message, score, sound, cssClass;
            
            switch (result) {
                case 'good':
                    message = "Excellent form! Keep it up!";
                    score = 10;
                    sound = goodSound;
                    cssClass = "correct-form";
                    break;
                case 'partial':
                    message = "Good attempt! Work on maintaining alignment.";
                    score = 5;
                    sound = warningSound;
                    cssClass = "partial-form";
                    break;
                case 'bad':
                    message = "Form needs improvement. Check instructions and try again.";
                    score = 0;
                    sound = badSound;
                    cssClass = "bad-form";
                    break;
            }
            
            // Update score and UI
            sessionScore += score;
            todayScore += score;
            weeklyProgress += score;
            sessionScoreDisplay.textContent = sessionScore;
            
            // Flash feedback
            document.body.classList.add(cssClass);
            setTimeout(() => {
                document.body.classList.remove(cssClass);
            }, 500);
            
            // Play sound
            sound.currentTime = 0;
            sound.play();
            
            // Add to feedback console
            addToFeedbackConsole(message, result);
            
            // Update progress bars
            updateProgressBars();
            
            // Save to localStorage
            saveProgress();
        }
        
        // Update the timer display
        function updateTimer() {
            const now = new Date();
            const elapsed = new Date(now - exerciseStartTime);
            const minutes = String(elapsed.getMinutes()).padStart(2, '0');
            const seconds = String(elapsed.getSeconds()).padStart(2, '0');
            feedbackTimer.textContent = `${minutes}:${seconds}`;
        }
        
        // Add a message to the feedback console
        function addToFeedbackConsole(message, type) {
            const colors = {
                'good': 'text-green-400',
                'partial': 'text-yellow-400',
                'bad': 'text-red-400',
                'system': 'text-blue-400'
            };
            
            const timestamp = new Date().toLocaleTimeString();
            const messageElement = document.createElement('div');
            messageElement.className = `flex ${colors[type] || 'text-gray-400'}`;
            messageElement.innerHTML = `<span class="text-gray-500 mr-2">[${timestamp}]</span> <span>${message}</span>`;
            
            feedbackConsole.appendChild(messageElement);
            feedbackConsole.scrollTop = feedbackConsole.scrollHeight;
        }
        
        // Update all progress bars
        function updateProgressBars() {
            // Today's score (max 100)
            const todayPercentage = Math.min(100, todayScore / 100 * 100);
            document.getElementById('todayScoreBar').style.width = `${todayPercentage}%`;
            todayScoreDisplay.textContent = todayScore;
            
            // Streak (max 7 days)
            const streakPercentage = Math.min(100, streakCount / 7 * 100);
            document.getElementById('streakBar').style.width = `${streakPercentage}%`;
            streakCountDisplay.textContent = streakCount;
            
            // Weekly progress (max 1000 points)
            const weeklyPercentage = Math.min(100, weeklyProgress / 1000 * 100);
            document.getElementById('weeklyProgressBar').style.width = `${weeklyPercentage}%`;
            weeklyProgressDisplay.textContent = weeklyProgress;
            
            // Circular progress (based on weekly)
            const circleOffset = 352 - (352 * weeklyPercentage / 100);
            progressCircle.style.strokeDashoffset = circleOffset;
            completionPercent.textContent = `${Math.floor(weeklyPercentage)}%`;
        }
        
        // Save progress to localStorage
        function saveProgress() {
            const data = {
                todayScore,
                streakCount,
                weeklyProgress
            };
            localStorage.setItem('physioGamerData', JSON.stringify(data));
        }
        
        // Reset the current exercise
        function resetExercise() {
            clearInterval(feedbackInterval);
            clearInterval(formEvaluationInterval);
            currentExercise = null;
            sessionScore = 0;
            sessionScoreDisplay.textContent = '0';
            statusDisplay.textContent = 'Select an exercise to begin';
            statusDisplay.className = "bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm font-medium";
            
            exerciseContainer.innerHTML = `
                <div class="text-center py-16">
                    <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/9dfb53ff-fbe4-4e83-a447-cf6e87c00dbf.png" alt="Placeholder showing selection prompt with illustration of different physical therapy exercises" class="rounded-lg mx-auto" />
                    <p class="mt-4 text-gray-500">Pick an exercise from the left to start your session</p>
                </div>
            `;
            
            addToFeedbackConsole("Session ended. Score: " + sessionScore, 'system');
        }
        
        // Initialize the app when the page loads
        window.onload = initApp;
    </script>
</body>
</html>

